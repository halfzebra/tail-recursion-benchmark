{"version":3,"sources":["node_modules/benchmark/benchmark.js","src/recoursive.js","src/tail-recoursive.js","src/loop.js","src/index.js","benchmarks/index.js"],"names":["recoursive","n","module","exports","tailRecoursive","a","b","loop","i","tmp","require","Benchmark","suite","Suite","add","on","event","console","log","String","target","filter","map","run","async"],"mappings":";;;AAwwFA,IAAA,EAAA,EAAA,UAAA,IAjwFA,WACA,aAGA,IAAA,EAGA,EAAA,CACA,UAAA,EACA,QAAA,GAIA,EAAA,SAAA,SAAA,QAAA,KAGA,EAAA,mBAAA,GAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,EAGA,EAAA,SAAA,UAAA,UAAA,QAAA,UAAA,QAGA,EAAA,SAAA,SAAA,SAAA,OAAA,UAAA,OAGA,EAAA,GAAA,GAAA,iBAAA,GAAA,GACA,GAAA,EAAA,SAAA,GAAA,EAAA,SAAA,GAAA,EAAA,OAAA,IACA,EAAA,GAIA,IAAA,EAAA,mBAAA,SAAA,QAGA,EAAA,EAGA,EAAA,GAAA,EAAA,UAAA,GAAA,EAGA,EAAA,wCAGA,EAAA,EAGA,EAAA,CACA,QAAA,OAAA,WAAA,OAAA,SAAA,SAAA,SAAA,IACA,eAAA,SAAA,WAAA,WAAA,YAAA,UACA,WAAA,UAAA,UAAA,cAIA,EAAA,CACA,EAAA,KACA,EAAA,IACA,EAAA,GACA,EAAA,EACA,EAAA,GAOA,EAAA,CACA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MACA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MACA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MACA,GAAA,MAAA,GAAA,MAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MACA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MACA,SAAA,MAOA,EAAA,CACA,EAAA,CAAA,EAAA,EAAA,GACA,EAAA,CAAA,EAAA,EAAA,EAAA,GACA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,KACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,KACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACA,GAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACA,GAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACA,GAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAA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","file":"benchmarks.1742d56b.js","sourceRoot":"..","sourcesContent":["/*!\n * Benchmark.js <https://benchmarkjs.com/>\n * Copyright 2010-2016 Mathias Bynens <https://mths.be/>\n * Based on JSLitmus.js, copyright Robert Kieffer <http://broofa.com/>\n * Modified by John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments. */\n  var undefined;\n\n  /** Used to determine if values are of the language type Object. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `define`. */\n  var freeDefine = typeof define == 'function' && typeof define.amd == 'object' && define.amd && define;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /** Detect free variable `require`. */\n  var freeRequire = typeof require == 'function' && require;\n\n  /** Used to assign each benchmark an incremented id. */\n  var counter = 0;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Used to detect primitive types. */\n  var rePrimitive = /^(?:boolean|number|string|undefined)$/;\n\n  /** Used to make every compiled test unique. */\n  var uidCounter = 0;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Date', 'Function', 'Math', 'Object', 'RegExp', 'String', '_',\n    'clearTimeout', 'chrome', 'chromium', 'document', 'navigator', 'phantom',\n    'platform', 'process', 'runtime', 'setTimeout'\n  ];\n\n  /** Used to avoid hz of Infinity. */\n  var divisors = {\n    '1': 4096,\n    '2': 512,\n    '3': 64,\n    '4': 8,\n    '5': 0\n  };\n\n  /**\n   * T-Distribution two-tailed critical values for 95% confidence.\n   * For more info see http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm.\n   */\n  var tTable = {\n    '1':  12.706, '2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n    '7':  2.365,  '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n    '13': 2.16,   '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n    '19': 2.093,  '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n    '25': 2.06,   '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n    'infinity': 1.96\n  };\n\n  /**\n   * Critical Mann-Whitney U-values for 95% confidence.\n   * For more info see http://www.saburchill.com/IBbiology/stats/003.html.\n   */\n  var uTable = {\n    '5':  [0, 1, 2],\n    '6':  [1, 2, 3, 5],\n    '7':  [1, 3, 5, 6, 8],\n    '8':  [2, 4, 6, 8, 10, 13],\n    '9':  [2, 4, 7, 10, 12, 15, 17],\n    '10': [3, 5, 8, 11, 14, 17, 20, 23],\n    '11': [3, 6, 9, 13, 16, 19, 23, 26, 30],\n    '12': [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],\n    '13': [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],\n    '14': [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],\n    '15': [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],\n    '16': [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],\n    '17': [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],\n    '18': [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],\n    '19': [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],\n    '20': [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],\n    '21': [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],\n    '22': [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],\n    '23': [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],\n    '24': [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],\n    '25': [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],\n    '26': [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],\n    '27': [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],\n    '28': [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],\n    '29': [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],\n    '30': [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `Benchmark` function using the given `context` object.\n   *\n   * @static\n   * @memberOf Benchmark\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `Benchmark` function.\n   */\n  function runInContext(context) {\n    // Exit early if unable to acquire lodash.\n    var _ = context && context._ || require('lodash') || root._;\n    if (!_) {\n      Benchmark.runInContext = runInContext;\n      return Benchmark;\n    }\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String;\n\n    /** Used for `Array` and `Object` method references. */\n    var arrayRef = [],\n        objectProto = Object.prototype;\n\n    /** Native method shortcuts. */\n    var abs = Math.abs,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        log = Math.log,\n        max = Math.max,\n        min = Math.min,\n        pow = Math.pow,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        shift = arrayRef.shift,\n        slice = arrayRef.slice,\n        sqrt = Math.sqrt,\n        toString = objectProto.toString,\n        unshift = arrayRef.unshift;\n\n    /** Used to avoid inclusion in Browserified bundles. */\n    var req = require;\n\n    /** Detect DOM document object. */\n    var doc = isHostType(context, 'document') && context.document;\n\n    /** Used to access Wade Simmons' Node.js `microtime` module. */\n    var microtimeObject = req('microtime');\n\n    /** Used to access Node.js's high resolution timer. */\n    var processObject = isHostType(context, 'process') && context.process;\n\n    /** Used to prevent a `removeChild` memory leak in IE < 9. */\n    var trash = doc && doc.createElement('div');\n\n    /** Used to integrity check compiled tests. */\n    var uid = 'uid' + _.now();\n\n    /** Used to avoid infinite recursion when methods call each other. */\n    var calledBy = {};\n\n    /**\n     * An object used to flag environments/features.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @type Object\n     */\n    var support = {};\n\n    (function() {\n\n      /**\n       * Detect if running in a browser environment.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.browser = doc && isHostType(context, 'navigator') && !isHostType(context, 'phantom');\n\n      /**\n       * Detect if the Timers API exists.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.timeout = isHostType(context, 'setTimeout') && isHostType(context, 'clearTimeout');\n\n      /**\n       * Detect if function decompilation is support.\n       *\n       * @name decompilation\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      try {\n        // Safari 2.x removes commas in object literals from `Function#toString` results.\n        // See http://webk.it/11609 for more details.\n        // Firefox 3.6 and Opera 9.25 strip grouping parentheses from `Function#toString` results.\n        // See http://bugzil.la/559438 for more details.\n        support.decompilation = Function(\n          ('return (' + (function(x) { return { 'x': '' + (1 + x) + '', 'y': 0 }; }) + ')')\n          // Avoid issues with code added by Istanbul.\n          .replace(/__cov__[^;]+;/g, '')\n        )()(0).x === '1';\n      } catch(e) {\n        support.decompilation = false;\n      }\n    }());\n\n    /**\n     * Timer object used by `clock()` and `Deferred#resolve`.\n     *\n     * @private\n     * @type Object\n     */\n    var timer = {\n\n      /**\n       * The timer namespace object or constructor.\n       *\n       * @private\n       * @memberOf timer\n       * @type {Function|Object}\n       */\n      'ns': Date,\n\n      /**\n       * Starts the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'start': null, // Lazy defined in `clock()`.\n\n      /**\n       * Stops the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'stop': null // Lazy defined in `clock()`.\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The Benchmark constructor.\n     *\n     * Note: The Benchmark constructor exposes a handful of lodash methods to\n     * make working with arrays, collections, and objects easier. The lodash\n     * methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`forOwn`](https://lodash.com/docs#forOwn),\n     * [`has`](https://lodash.com/docs#has), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var bench = new Benchmark(fn);\n     *\n     * // or using a name first\n     * var bench = new Benchmark('foo', fn);\n     *\n     * // or with options\n     * var bench = new Benchmark('foo', fn, {\n     *\n     *   // displayed by `Benchmark#toString` if `name` is not available\n     *   'id': 'xyz',\n     *\n     *   // called when the benchmark starts running\n     *   'onStart': onStart,\n     *\n     *   // called after each run cycle\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the benchmark completes running\n     *   'onComplete': onComplete,\n     *\n     *   // compiled/called before the test loop\n     *   'setup': setup,\n     *\n     *   // compiled/called after the test loop\n     *   'teardown': teardown\n     * });\n     *\n     * // or name and options\n     * var bench = new Benchmark('foo', {\n     *\n     *   // a flag to indicate the benchmark is deferred\n     *   'defer': true,\n     *\n     *   // benchmark test function\n     *   'fn': function(deferred) {\n     *     // call `Deferred#resolve` when the deferred test is finished\n     *     deferred.resolve();\n     *   }\n     * });\n     *\n     * // or options only\n     * var bench = new Benchmark({\n     *\n     *   // benchmark name\n     *   'name': 'foo',\n     *\n     *   // benchmark test as a string\n     *   'fn': '[1,2,3,4].sort()'\n     * });\n     *\n     * // a test's `this` binding is set to the benchmark instance\n     * var bench = new Benchmark('foo', function() {\n     *   'My name is '.concat(this.name); // \"My name is foo\"\n     * });\n     */\n    function Benchmark(name, fn, options) {\n      var bench = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(bench instanceof Benchmark)) {\n        return new Benchmark(name, fn, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      }\n      else if (_.isFunction(name)) {\n        // 2 arguments (fn, options).\n        options = fn;\n        fn = name;\n      }\n      else if (_.isPlainObject(fn)) {\n        // 2 arguments (name, options).\n        options = fn;\n        fn = null;\n        bench.name = name;\n      }\n      else {\n        // 3 arguments (name, fn [, options]).\n        bench.name = name;\n      }\n      setOptions(bench, options);\n\n      bench.id || (bench.id = ++counter);\n      bench.fn == null && (bench.fn = fn);\n\n      bench.stats = cloneDeep(bench.stats);\n      bench.times = cloneDeep(bench.times);\n    }\n\n    /**\n     * The Deferred constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object} clone The cloned benchmark instance.\n     */\n    function Deferred(clone) {\n      var deferred = this;\n      if (!(deferred instanceof Deferred)) {\n        return new Deferred(clone);\n      }\n      deferred.benchmark = clone;\n      clock(deferred);\n    }\n\n    /**\n     * The Event constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object|string} type The event type.\n     */\n    function Event(type) {\n      var event = this;\n      if (type instanceof Event) {\n        return type;\n      }\n      return (event instanceof Event)\n        ? _.assign(event, { 'timeStamp': _.now() }, typeof type == 'string' ? { 'type': type } : type)\n        : new Event(type);\n    }\n\n    /**\n     * The Suite constructor.\n     *\n     * Note: Each Suite instance has a handful of wrapped lodash methods to\n     * make working with Suites easier. The wrapped lodash methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {string} name A name to identify the suite.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var suite = new Benchmark.Suite;\n     *\n     * // or using a name first\n     * var suite = new Benchmark.Suite('foo');\n     *\n     * // or with options\n     * var suite = new Benchmark.Suite('foo', {\n     *\n     *   // called when the suite starts running\n     *   'onStart': onStart,\n     *\n     *   // called between running benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the suite completes running\n     *   'onComplete': onComplete\n     * });\n     */\n    function Suite(name, options) {\n      var suite = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(suite instanceof Suite)) {\n        return new Suite(name, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      } else {\n        // 2 arguments (name [, options]).\n        suite.name = name;\n      }\n      setOptions(suite, options);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A specialized version of `_.cloneDeep` which only clones arrays and plain\n     * objects assigning all other values by reference.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @returns {*} The cloned value.\n     */\n    var cloneDeep = _.partial(_.cloneDeepWith, _, function(value) {\n      // Only clone primitives, arrays, and plain objects.\n      if (!_.isArray(value) && !_.isPlainObject(value)) {\n        return value;\n      }\n    });\n\n    /**\n     * Creates a function from the given arguments string and body.\n     *\n     * @private\n     * @param {string} args The comma separated function arguments.\n     * @param {string} body The function body.\n     * @returns {Function} The new function.\n     */\n    function createFunction() {\n      // Lazy define.\n      createFunction = function(args, body) {\n        var result,\n            anchor = freeDefine ? freeDefine.amd : Benchmark,\n            prop = uid + 'createFunction';\n\n        runScript((freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '=function(' + args + '){' + body + '}');\n        result = anchor[prop];\n        delete anchor[prop];\n        return result;\n      };\n      // Fix JaegerMonkey bug.\n      // For more information see http://bugzil.la/639720.\n      createFunction = support.browser && (createFunction('', 'return\"' + uid + '\"') || _.noop)() == uid ? createFunction : Function;\n      return createFunction.apply(null, arguments);\n    }\n\n    /**\n     * Delay the execution of a function based on the benchmark's `delay` property.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} fn The function to execute.\n     */\n    function delay(bench, fn) {\n      bench._timerId = _.delay(fn, bench.delay * 1e3);\n    }\n\n    /**\n     * Destroys the given element.\n     *\n     * @private\n     * @param {Element} element The element to destroy.\n     */\n    function destroyElement(element) {\n      trash.appendChild(element);\n      trash.innerHTML = '';\n    }\n\n    /**\n     * Gets the name of the first argument from a function's source.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The argument name.\n     */\n    function getFirstArgument(fn) {\n      return (!_.has(fn, 'toString') &&\n        (/^[\\s(]*function[^(]*\\(([^\\s,)]+)/.exec(fn) || 0)[1]) || '';\n    }\n\n    /**\n     * Computes the arithmetic mean of a sample.\n     *\n     * @private\n     * @param {Array} sample The sample.\n     * @returns {number} The mean.\n     */\n    function getMean(sample) {\n      return (_.reduce(sample, function(sum, x) {\n        return sum + x;\n      }) / sample.length) || 0;\n    }\n\n    /**\n     * Gets the source code of a function.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The function's source code.\n     */\n    function getSource(fn) {\n      var result = '';\n      if (isStringable(fn)) {\n        result = String(fn);\n      } else if (support.decompilation) {\n        // Escape the `{` for Firefox 1.\n        result = _.result(/^[^{]+\\{([\\s\\S]*)\\}\\s*$/.exec(fn), 1);\n      }\n      // Trim string.\n      result = (result || '').replace(/^\\s+|\\s+$/g, '');\n\n      // Detect strings containing only the \"use strict\" directive.\n      return /^(?:\\/\\*+[\\w\\W]*?\\*\\/|\\/\\/.*?[\\n\\r\\u2028\\u2029]|\\s)*([\"'])use strict\\1;?$/.test(result)\n        ? ''\n        : result;\n    }\n\n    /**\n     * Checks if an object is of the specified class.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {string} name The name of the class.\n     * @returns {boolean} Returns `true` if the value is of the specified class, else `false`.\n     */\n    function isClassOf(value, name) {\n      return value != null && toString.call(value) == '[object ' + name + ']';\n    }\n\n    /**\n     * Host objects can return type values that are different from their actual\n     * data type. The objects we are concerned with usually return non-primitive\n     * types of \"object\", \"function\", or \"unknown\".\n     *\n     * @private\n     * @param {*} object The owner of the property.\n     * @param {string} property The property to check.\n     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n     */\n    function isHostType(object, property) {\n      if (object == null) {\n        return false;\n      }\n      var type = typeof object[property];\n      return !rePrimitive.test(type) && (type != 'object' || !!object[property]);\n    }\n\n    /**\n     * Checks if a value can be safely coerced to a string.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the value can be coerced, else `false`.\n     */\n    function isStringable(value) {\n      return _.isString(value) || (_.has(value, 'toString') && _.isFunction(value.toString));\n    }\n\n    /**\n     * A wrapper around `require` to suppress `module missing` errors.\n     *\n     * @private\n     * @param {string} id The module id.\n     * @returns {*} The exported module or `null`.\n     */\n    function require(id) {\n      try {\n        var result = freeExports && freeRequire(id);\n      } catch(e) {}\n      return result || null;\n    }\n\n    /**\n     * Runs a snippet of JavaScript via script injection.\n     *\n     * @private\n     * @param {string} code The code to run.\n     */\n    function runScript(code) {\n      var anchor = freeDefine ? define.amd : Benchmark,\n          script = doc.createElement('script'),\n          sibling = doc.getElementsByTagName('script')[0],\n          parent = sibling.parentNode,\n          prop = uid + 'runScript',\n          prefix = '(' + (freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '||function(){})();';\n\n      // Firefox 2.0.0.2 cannot use script injection as intended because it executes\n      // asynchronously, but that's OK because script injection is only used to avoid\n      // the previously commented JaegerMonkey bug.\n      try {\n        // Remove the inserted script *before* running the code to avoid differences\n        // in the expected script element count/order of the document.\n        script.appendChild(doc.createTextNode(prefix + code));\n        anchor[prop] = function() { destroyElement(script); };\n      } catch(e) {\n        parent = parent.cloneNode(false);\n        sibling = null;\n        script.text = code;\n      }\n      parent.insertBefore(script, sibling);\n      delete anchor[prop];\n    }\n\n    /**\n     * A helper function for setting options/event handlers.\n     *\n     * @private\n     * @param {Object} object The benchmark or suite instance.\n     * @param {Object} [options={}] Options object.\n     */\n    function setOptions(object, options) {\n      options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));\n\n      _.forOwn(options, function(value, key) {\n        if (value != null) {\n          // Add event listeners.\n          if (/^on[A-Z]/.test(key)) {\n            _.each(key.split(' '), function(key) {\n              object.on(key.slice(2).toLowerCase(), value);\n            });\n          } else if (!_.has(object, key)) {\n            object[key] = cloneDeep(value);\n          }\n        }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Handles cycling/completing the deferred benchmark.\n     *\n     * @memberOf Benchmark.Deferred\n     */\n    function resolve() {\n      var deferred = this,\n          clone = deferred.benchmark,\n          bench = clone._original;\n\n      if (bench.aborted) {\n        // cycle() -> clone cycle/complete event -> compute()'s invoked bench.run() cycle/complete.\n        deferred.teardown();\n        clone.running = false;\n        cycle(deferred);\n      }\n      else if (++deferred.cycles < clone.count) {\n        clone.compiled.call(deferred, context, timer);\n      }\n      else {\n        timer.stop(deferred);\n        deferred.teardown();\n        delay(clone, function() { cycle(deferred); });\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A generic `Array#filter` like method.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} array The array to iterate over.\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Array} A new array of values that passed callback filter.\n     * @example\n     *\n     * // get odd numbers\n     * Benchmark.filter([1, 2, 3, 4, 5], function(n) {\n     *   return n % 2;\n     * }); // -> [1, 3, 5];\n     *\n     * // get fastest benchmarks\n     * Benchmark.filter(benches, 'fastest');\n     *\n     * // get slowest benchmarks\n     * Benchmark.filter(benches, 'slowest');\n     *\n     * // get benchmarks that completed without erroring\n     * Benchmark.filter(benches, 'successful');\n     */\n    function filter(array, callback) {\n      if (callback === 'successful') {\n        // Callback to exclude those that are errored, unrun, or have hz of Infinity.\n        callback = function(bench) {\n          return bench.cycles && _.isFinite(bench.hz) && !bench.error;\n        };\n      }\n      else if (callback === 'fastest' || callback === 'slowest') {\n        // Get successful, sort by period + margin of error, and filter fastest/slowest.\n        var result = filter(array, 'successful').sort(function(a, b) {\n          a = a.stats; b = b.stats;\n          return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === 'fastest' ? 1 : -1);\n        });\n\n        return _.filter(result, function(bench) {\n          return result[0].compare(bench) == 0;\n        });\n      }\n      return _.filter(array, callback);\n    }\n\n    /**\n     * Converts a number to a more readable comma-separated string representation.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {number} number The number to convert.\n     * @returns {string} The more readable string representation.\n     */\n    function formatNumber(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') +\n        (number[1] ? '.' + number[1] : '');\n    }\n\n    /**\n     * Invokes a method on all items in an array.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} benches Array of benchmarks to iterate over.\n     * @param {Object|string} name The name of the method to invoke OR options object.\n     * @param {...*} [args] Arguments to invoke the method with.\n     * @returns {Array} A new array of values returned from each method invoked.\n     * @example\n     *\n     * // invoke `reset` on all benchmarks\n     * Benchmark.invoke(benches, 'reset');\n     *\n     * // invoke `emit` with arguments\n     * Benchmark.invoke(benches, 'emit', 'complete', listener);\n     *\n     * // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks\n     * Benchmark.invoke(benches, {\n     *\n     *   // invoke the `run` method\n     *   'name': 'run',\n     *\n     *   // pass a single argument\n     *   'args': true,\n     *\n     *   // treat as queue, removing benchmarks from front of `benches` until empty\n     *   'queued': true,\n     *\n     *   // called before any benchmarks have been invoked.\n     *   'onStart': onStart,\n     *\n     *   // called between invoking benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called after all benchmarks have been invoked.\n     *   'onComplete': onComplete\n     * });\n     */\n    function invoke(benches, name) {\n      var args,\n          bench,\n          queued,\n          index = -1,\n          eventProps = { 'currentTarget': benches },\n          options = { 'onStart': _.noop, 'onCycle': _.noop, 'onComplete': _.noop },\n          result = _.toArray(benches);\n\n      /**\n       * Invokes the method of the current object and if synchronous, fetches the next.\n       */\n      function execute() {\n        var listeners,\n            async = isAsync(bench);\n\n        if (async) {\n          // Use `getNext` as the first listener.\n          bench.on('complete', getNext);\n          listeners = bench.events.complete;\n          listeners.splice(0, 0, listeners.pop());\n        }\n        // Execute method.\n        result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined;\n        // If synchronous return `true` until finished.\n        return !async && getNext();\n      }\n\n      /**\n       * Fetches the next bench or executes `onComplete` callback.\n       */\n      function getNext(event) {\n        var cycleEvent,\n            last = bench,\n            async = isAsync(last);\n\n        if (async) {\n          last.off('complete', getNext);\n          last.emit('complete');\n        }\n        // Emit \"cycle\" event.\n        eventProps.type = 'cycle';\n        eventProps.target = last;\n        cycleEvent = Event(eventProps);\n        options.onCycle.call(benches, cycleEvent);\n\n        // Choose next benchmark if not exiting early.\n        if (!cycleEvent.aborted && raiseIndex() !== false) {\n          bench = queued ? benches[0] : result[index];\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          }\n          else if (async) {\n            // Resume execution if previously asynchronous but now synchronous.\n            while (execute()) {}\n          }\n          else {\n            // Continue synchronous execution.\n            return true;\n          }\n        } else {\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // When used as a listener `event.aborted = true` will cancel the rest of\n        // the \"complete\" listeners because they were already called above and when\n        // used as part of `getNext` the `return false` will exit the execution while-loop.\n        if (event) {\n          event.aborted = true;\n        } else {\n          return false;\n        }\n      }\n\n      /**\n       * Checks if invoking `Benchmark#run` with asynchronous cycles.\n       */\n      function isAsync(object) {\n        // Avoid using `instanceof` here because of IE memory leak issues with host objects.\n        var async = args[0] && args[0].async;\n        return name == 'run' && (object instanceof Benchmark) &&\n          ((async == null ? object.options.async : async) && support.timeout || object.defer);\n      }\n\n      /**\n       * Raises `index` to the next defined index or returns `false`.\n       */\n      function raiseIndex() {\n        index++;\n\n        // If queued remove the previous bench.\n        if (queued && index > 0) {\n          shift.call(benches);\n        }\n        // If we reached the last index then return `false`.\n        return (queued ? benches.length : index < result.length)\n          ? index\n          : (index = false);\n      }\n      // Juggle arguments.\n      if (_.isString(name)) {\n        // 2 arguments (array, name).\n        args = slice.call(arguments, 2);\n      } else {\n        // 2 arguments (array, options).\n        options = _.assign(options, name);\n        name = options.name;\n        args = _.isArray(args = 'args' in options ? options.args : []) ? args : [args];\n        queued = options.queued;\n      }\n      // Start iterating over the array.\n      if (raiseIndex() !== false) {\n        // Emit \"start\" event.\n        bench = result[index];\n        eventProps.type = 'start';\n        eventProps.target = bench;\n        options.onStart.call(benches, Event(eventProps));\n\n        // End early if the suite was aborted in an \"onStart\" listener.\n        if (name == 'run' && (benches instanceof Suite) && benches.aborted) {\n          // Emit \"cycle\" event.\n          eventProps.type = 'cycle';\n          options.onCycle.call(benches, Event(eventProps));\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // Start method execution.\n        else {\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          } else {\n            while (execute()) {}\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a string of joined array values or object key-value pairs.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array|Object} object The object to operate on.\n     * @param {string} [separator1=','] The separator used between key-value pairs.\n     * @param {string} [separator2=': '] The separator used between keys and values.\n     * @returns {string} The joined result.\n     */\n    function join(object, separator1, separator2) {\n      var result = [],\n          length = (object = Object(object)).length,\n          arrayLike = length === length >>> 0;\n\n      separator2 || (separator2 = ': ');\n      _.each(object, function(value, key) {\n        result.push(arrayLike ? value : key + separator2 + value);\n      });\n      return result.join(separator1 || ',');\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts all benchmarks in the suite.\n     *\n     * @name abort\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function abortSuite() {\n      var event,\n          suite = this,\n          resetting = calledBy.resetSuite;\n\n      if (suite.running) {\n        event = Event('abort');\n        suite.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abortSuite = true;\n          suite.reset();\n          delete calledBy.abortSuite;\n\n          if (!resetting) {\n            suite.aborted = true;\n            invoke(suite, 'abort');\n          }\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Adds a test to the benchmark suite.\n     *\n     * @memberOf Benchmark.Suite\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.add(fn);\n     *\n     * // or using a name first\n     * suite.add('foo', fn);\n     *\n     * // or with options\n     * suite.add('foo', fn, {\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or name and options\n     * suite.add('foo', {\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or options only\n     * suite.add({\n     *   'name': 'foo',\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     */\n    function add(name, fn, options) {\n      var suite = this,\n          bench = new Benchmark(name, fn, options),\n          event = Event({ 'type': 'add', 'target': bench });\n\n      if (suite.emit(event), !event.cancelled) {\n        suite.push(bench);\n      }\n      return suite;\n    }\n\n    /**\n     * Creates a new suite with cloned benchmarks.\n     *\n     * @name clone\n     * @memberOf Benchmark.Suite\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new suite instance.\n     */\n    function cloneSuite(options) {\n      var suite = this,\n          result = new suite.constructor(_.assign({}, suite.options, options));\n\n      // Copy own properties.\n      _.forOwn(suite, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = _.isFunction(_.get(value, 'clone'))\n            ? value.clone()\n            : cloneDeep(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * An `Array#filter` like method.\n     *\n     * @name filter\n     * @memberOf Benchmark.Suite\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Object} A new suite of benchmarks that passed callback filter.\n     */\n    function filterSuite(callback) {\n      var suite = this,\n          result = new suite.constructor(suite.options);\n\n      result.push.apply(result, filter(suite, callback));\n      return result;\n    }\n\n    /**\n     * Resets all benchmarks in the suite.\n     *\n     * @name reset\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function resetSuite() {\n      var event,\n          suite = this,\n          aborting = calledBy.abortSuite;\n\n      if (suite.running && !aborting) {\n        // No worries, `resetSuite()` is called within `abortSuite()`.\n        calledBy.resetSuite = true;\n        suite.abort();\n        delete calledBy.resetSuite;\n      }\n      // Reset if the state has changed.\n      else if ((suite.aborted || suite.running) &&\n          (suite.emit(event = Event('reset')), !event.cancelled)) {\n        suite.aborted = suite.running = false;\n        if (!aborting) {\n          invoke(suite, 'reset');\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Runs the suite.\n     *\n     * @name run\n     * @memberOf Benchmark.Suite\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.run();\n     *\n     * // or with options\n     * suite.run({ 'async': true, 'queued': true });\n     */\n    function runSuite(options) {\n      var suite = this;\n\n      suite.reset();\n      suite.running = true;\n      options || (options = {});\n\n      invoke(suite, {\n        'name': 'run',\n        'args': options,\n        'queued': options.queued,\n        'onStart': function(event) {\n          suite.emit(event);\n        },\n        'onCycle': function(event) {\n          var bench = event.target;\n          if (bench.error) {\n            suite.emit({ 'type': 'error', 'target': bench });\n          }\n          suite.emit(event);\n          event.aborted = suite.aborted;\n        },\n        'onComplete': function(event) {\n          suite.running = false;\n          suite.emit(event);\n        }\n      });\n      return suite;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Executes all registered listeners of the specified event type.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {Object|string} type The event type or object.\n     * @param {...*} [args] Arguments to invoke the listener with.\n     * @returns {*} Returns the return value of the last listener executed.\n     */\n    function emit(type) {\n      var listeners,\n          object = this,\n          event = Event(type),\n          events = object.events,\n          args = (arguments[0] = event, arguments);\n\n      event.currentTarget || (event.currentTarget = object);\n      event.target || (event.target = object);\n      delete event.result;\n\n      if (events && (listeners = _.has(events, event.type) && events[event.type])) {\n        _.each(listeners.slice(), function(listener) {\n          if ((event.result = listener.apply(object, args)) === false) {\n            event.cancelled = true;\n          }\n          return !event.aborted;\n        });\n      }\n      return event.result;\n    }\n\n    /**\n     * Returns an array of event listeners for a given type that can be manipulated\n     * to add or remove listeners.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @returns {Array} The listeners array.\n     */\n    function listeners(type) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      return _.has(events, type) ? events[type] : (events[type] = []);\n    }\n\n    /**\n     * Unregisters a listener for the specified event type(s),\n     * or unregisters all listeners for the specified event type(s),\n     * or unregisters all listeners for all event types.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} [type] The event type.\n     * @param {Function} [listener] The function to unregister.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // unregister a listener for an event type\n     * bench.off('cycle', listener);\n     *\n     * // unregister a listener for multiple event types\n     * bench.off('start cycle', listener);\n     *\n     * // unregister all listeners for an event type\n     * bench.off('cycle');\n     *\n     * // unregister all listeners for multiple event types\n     * bench.off('start cycle complete');\n     *\n     * // unregister all listeners for all event types\n     * bench.off();\n     */\n    function off(type, listener) {\n      var object = this,\n          events = object.events;\n\n      if (!events) {\n        return object;\n      }\n      _.each(type ? type.split(' ') : events, function(listeners, type) {\n        var index;\n        if (typeof listeners == 'string') {\n          type = listeners;\n          listeners = _.has(events, type) && events[type];\n        }\n        if (listeners) {\n          if (listener) {\n            index = _.indexOf(listeners, listener);\n            if (index > -1) {\n              listeners.splice(index, 1);\n            }\n          } else {\n            listeners.length = 0;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * Registers a listener for the specified event type(s).\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @param {Function} listener The function to register.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // register a listener for an event type\n     * bench.on('cycle', listener);\n     *\n     * // register a listener for multiple event types\n     * bench.on('start cycle', listener);\n     */\n    function on(type, listener) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      _.each(type.split(' '), function(type) {\n        (_.has(events, type)\n          ? events[type]\n          : (events[type] = [])\n        ).push(listener);\n      });\n      return object;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts the benchmark without recording times.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function abort() {\n      var event,\n          bench = this,\n          resetting = calledBy.reset;\n\n      if (bench.running) {\n        event = Event('abort');\n        bench.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abort = true;\n          bench.reset();\n          delete calledBy.abort;\n\n          if (support.timeout) {\n            clearTimeout(bench._timerId);\n            delete bench._timerId;\n          }\n          if (!resetting) {\n            bench.aborted = true;\n            bench.running = false;\n          }\n        }\n      }\n      return bench;\n    }\n\n    /**\n     * Creates a new benchmark using the same test and options.\n     *\n     * @memberOf Benchmark\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new benchmark instance.\n     * @example\n     *\n     * var bizarro = bench.clone({\n     *   'name': 'doppelganger'\n     * });\n     */\n    function clone(options) {\n      var bench = this,\n          result = new bench.constructor(_.assign({}, bench, options));\n\n      // Correct the `options` object.\n      result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));\n\n      // Copy own custom properties.\n      _.forOwn(bench, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = cloneDeep(value);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Determines if a benchmark is faster than another.\n     *\n     * @memberOf Benchmark\n     * @param {Object} other The benchmark to compare.\n     * @returns {number} Returns `-1` if slower, `1` if faster, and `0` if indeterminate.\n     */\n    function compare(other) {\n      var bench = this;\n\n      // Exit early if comparing the same benchmark.\n      if (bench == other) {\n        return 0;\n      }\n      var critical,\n          zStat,\n          sample1 = bench.stats.sample,\n          sample2 = other.stats.sample,\n          size1 = sample1.length,\n          size2 = sample2.length,\n          maxSize = max(size1, size2),\n          minSize = min(size1, size2),\n          u1 = getU(sample1, sample2),\n          u2 = getU(sample2, sample1),\n          u = min(u1, u2);\n\n      function getScore(xA, sampleB) {\n        return _.reduce(sampleB, function(total, xB) {\n          return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);\n        }, 0);\n      }\n\n      function getU(sampleA, sampleB) {\n        return _.reduce(sampleA, function(total, xA) {\n          return total + getScore(xA, sampleB);\n        }, 0);\n      }\n\n      function getZ(u) {\n        return (u - ((size1 * size2) / 2)) / sqrt((size1 * size2 * (size1 + size2 + 1)) / 12);\n      }\n      // Reject the null hypothesis the two samples come from the\n      // same population (i.e. have the same median) if...\n      if (size1 + size2 > 30) {\n        // ...the z-stat is greater than 1.96 or less than -1.96\n        // http://www.statisticslectures.com/topics/mannwhitneyu/\n        zStat = getZ(u);\n        return abs(zStat) > 1.96 ? (u == u1 ? 1 : -1) : 0;\n      }\n      // ...the U value is less than or equal the critical U value.\n      critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];\n      return u <= critical ? (u == u1 ? 1 : -1) : 0;\n    }\n\n    /**\n     * Reset properties and abort if running.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function reset() {\n      var bench = this;\n      if (bench.running && !calledBy.abort) {\n        // No worries, `reset()` is called within `abort()`.\n        calledBy.reset = true;\n        bench.abort();\n        delete calledBy.reset;\n        return bench;\n      }\n      var event,\n          index = 0,\n          changes = [],\n          queue = [];\n\n      // A non-recursive solution to check if properties have changed.\n      // For more information see http://www.jslab.dk/articles/non.recursive.preorder.traversal.part4.\n      var data = {\n        'destination': bench,\n        'source': _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))\n      };\n\n      do {\n        _.forOwn(data.source, function(value, key) {\n          var changed,\n              destination = data.destination,\n              currValue = destination[key];\n\n          // Skip pseudo private properties and event listeners.\n          if (/^_|^events$|^on[A-Z]/.test(key)) {\n            return;\n          }\n          if (_.isObjectLike(value)) {\n            if (_.isArray(value)) {\n              // Check if an array value has changed to a non-array value.\n              if (!_.isArray(currValue)) {\n                changed = true;\n                currValue = [];\n              }\n              // Check if an array has changed its length.\n              if (currValue.length != value.length) {\n                changed = true;\n                currValue = currValue.slice(0, value.length);\n                currValue.length = value.length;\n              }\n            }\n            // Check if an object has changed to a non-object value.\n            else if (!_.isObjectLike(currValue)) {\n              changed = true;\n              currValue = {};\n            }\n            // Register a changed object.\n            if (changed) {\n              changes.push({ 'destination': destination, 'key': key, 'value': currValue });\n            }\n            queue.push({ 'destination': currValue, 'source': value });\n          }\n          // Register a changed primitive.\n          else if (!_.eq(currValue, value) && value !== undefined) {\n            changes.push({ 'destination': destination, 'key': key, 'value': value });\n          }\n        });\n      }\n      while ((data = queue[index++]));\n\n      // If changed emit the `reset` event and if it isn't cancelled reset the benchmark.\n      if (changes.length &&\n          (bench.emit(event = Event('reset')), !event.cancelled)) {\n        _.each(changes, function(data) {\n          data.destination[data.key] = data.value;\n        });\n      }\n      return bench;\n    }\n\n    /**\n     * Displays relevant benchmark information when coerced to a string.\n     *\n     * @name toString\n     * @memberOf Benchmark\n     * @returns {string} A string representation of the benchmark instance.\n     */\n    function toStringBench() {\n      var bench = this,\n          error = bench.error,\n          hz = bench.hz,\n          id = bench.id,\n          stats = bench.stats,\n          size = stats.sample.length,\n          pm = '\\xb1',\n          result = bench.name || (_.isNaN(id) ? id : '<Test #' + id + '>');\n\n      if (error) {\n        var errorStr;\n        if (!_.isObject(error)) {\n          errorStr = String(error);\n        } else if (!_.isError(Error)) {\n          errorStr = join(error);\n        } else {\n          // Error#name and Error#message properties are non-enumerable.\n          errorStr = join(_.assign({ 'name': error.name, 'message': error.message }, error));\n        }\n        result += ': ' + errorStr;\n      }\n      else {\n        result += ' x ' + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + ' ops/sec ' + pm +\n          stats.rme.toFixed(2) + '% (' + size + ' run' + (size == 1 ? '' : 's') + ' sampled)';\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clocks the time taken to execute a test per cycle (secs).\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @returns {number} The time taken.\n     */\n    function clock() {\n      var options = Benchmark.options,\n          templateData = {},\n          timers = [{ 'ns': timer.ns, 'res': max(0.0015, getRes('ms')), 'unit': 'ms' }];\n\n      // Lazy define for hi-res timers.\n      clock = function(clone) {\n        var deferred;\n\n        if (clone instanceof Deferred) {\n          deferred = clone;\n          clone = deferred.benchmark;\n        }\n        var bench = clone._original,\n            stringable = isStringable(bench.fn),\n            count = bench.count = clone.count,\n            decompilable = stringable || (support.decompilation && (clone.setup !== _.noop || clone.teardown !== _.noop)),\n            id = bench.id,\n            name = bench.name || (typeof id == 'number' ? '<Test #' + id + '>' : id),\n            result = 0;\n\n        // Init `minTime` if needed.\n        clone.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);\n\n        // Compile in setup/teardown functions and the test loop.\n        // Create a new compiled test, instead of using the cached `bench.compiled`,\n        // to avoid potential engine optimizations enabled over the life of the test.\n        var funcBody = deferred\n          ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;' +\n            // When `deferred.cycles` is `0` then...\n            'if(!d#.cycles){' +\n            // set `deferred.fn`,\n            'd#.fn=function(){var ${fnArg}=d#;if(typeof f#==\"function\"){try{${fn}\\n}catch(e#){f#(d#)}}else{${fn}\\n}};' +\n            // set `deferred.teardown`,\n            'd#.teardown=function(){d#.cycles=0;if(typeof td#==\"function\"){try{${teardown}\\n}catch(e#){td#()}}else{${teardown}\\n}};' +\n            // execute the benchmark's `setup`,\n            'if(typeof su#==\"function\"){try{${setup}\\n}catch(e#){su#()}}else{${setup}\\n};' +\n            // start timer,\n            't#.start(d#);' +\n            // and then execute `deferred.fn` and return a dummy object.\n            '}d#.fn();return{uid:\"${uid}\"}'\n\n          : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\\n${begin};' +\n            'while(i#--){${fn}\\n}${end};${teardown}\\nreturn{elapsed:r#,uid:\"${uid}\"}';\n\n        var compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody),\n            isEmpty = !(templateData.fn || stringable);\n\n        try {\n          if (isEmpty) {\n            // Firefox may remove dead code from `Function#toString` results.\n            // For more information see http://bugzil.la/536085.\n            throw new Error('The test \"' + name + '\" is empty. This may be the result of dead code removal.');\n          }\n          else if (!deferred) {\n            // Pretest to determine if compiled code exits early, usually by a\n            // rogue `return` statement, by checking for a return object with the uid.\n            bench.count = 1;\n            compiled = decompilable && (compiled.call(bench, context, timer) || {}).uid == templateData.uid && compiled;\n            bench.count = count;\n          }\n        } catch(e) {\n          compiled = null;\n          clone.error = e || new Error(String(e));\n          bench.count = count;\n        }\n        // Fallback when a test exits early or errors during pretest.\n        if (!compiled && !deferred && !isEmpty) {\n          funcBody = (\n            stringable || (decompilable && !clone.error)\n              ? 'function f#(){${fn}\\n}var r#,s#,m#=this,i#=m#.count'\n              : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count'\n            ) +\n            ',n#=t#.ns;${setup}\\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};' +\n            'delete m#.f#;${teardown}\\nreturn{elapsed:r#}';\n\n          compiled = createCompiled(bench, decompilable, deferred, funcBody);\n\n          try {\n            // Pretest one more time to check for errors.\n            bench.count = 1;\n            compiled.call(bench, context, timer);\n            bench.count = count;\n            delete clone.error;\n          }\n          catch(e) {\n            bench.count = count;\n            if (!clone.error) {\n              clone.error = e || new Error(String(e));\n            }\n          }\n        }\n        // If no errors run the full test loop.\n        if (!clone.error) {\n          compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody);\n          result = compiled.call(deferred || bench, context, timer).elapsed;\n        }\n        return result;\n      };\n\n      /*----------------------------------------------------------------------*/\n\n      /**\n       * Creates a compiled function from the given function `body`.\n       */\n      function createCompiled(bench, decompilable, deferred, body) {\n        var fn = bench.fn,\n            fnArg = deferred ? getFirstArgument(fn) || 'deferred' : '';\n\n        templateData.uid = uid + uidCounter++;\n\n        _.assign(templateData, {\n          'setup': decompilable ? getSource(bench.setup) : interpolate('m#.setup()'),\n          'fn': decompilable ? getSource(fn) : interpolate('m#.fn(' + fnArg + ')'),\n          'fnArg': fnArg,\n          'teardown': decompilable ? getSource(bench.teardown) : interpolate('m#.teardown()')\n        });\n\n        // Use API of chosen timer.\n        if (timer.unit == 'ns') {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#()'),\n            'end': interpolate('r#=n#(s#);r#=r#[0]+(r#[1]/1e9)')\n          });\n        }\n        else if (timer.unit == 'us') {\n          if (timer.ns.stop) {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#.start()'),\n              'end': interpolate('r#=n#.microseconds()/1e6')\n            });\n          } else {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#()'),\n              'end': interpolate('r#=(n#()-s#)/1e6')\n            });\n          }\n        }\n        else if (timer.ns.now) {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#.now()'),\n            'end': interpolate('r#=(n#.now()-s#)/1e3')\n          });\n        }\n        else {\n          _.assign(templateData, {\n            'begin': interpolate('s#=new n#().getTime()'),\n            'end': interpolate('r#=(new n#().getTime()-s#)/1e3')\n          });\n        }\n        // Define `timer` methods.\n        timer.start = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#')\n        );\n\n        timer.stop = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#')\n        );\n\n        // Create compiled test.\n        return createFunction(\n          interpolate('window,t#'),\n          'var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\\n' +\n          interpolate(body)\n        );\n      }\n\n      /**\n       * Gets the current timer's minimum resolution (secs).\n       */\n      function getRes(unit) {\n        var measured,\n            begin,\n            count = 30,\n            divisor = 1e3,\n            ns = timer.ns,\n            sample = [];\n\n        // Get average smallest measurable time.\n        while (count--) {\n          if (unit == 'us') {\n            divisor = 1e6;\n            if (ns.stop) {\n              ns.start();\n              while (!(measured = ns.microseconds())) {}\n            } else {\n              begin = ns();\n              while (!(measured = ns() - begin)) {}\n            }\n          }\n          else if (unit == 'ns') {\n            divisor = 1e9;\n            begin = (begin = ns())[0] + (begin[1] / divisor);\n            while (!(measured = ((measured = ns())[0] + (measured[1] / divisor)) - begin)) {}\n            divisor = 1;\n          }\n          else if (ns.now) {\n            begin = ns.now();\n            while (!(measured = ns.now() - begin)) {}\n          }\n          else {\n            begin = new ns().getTime();\n            while (!(measured = new ns().getTime() - begin)) {}\n          }\n          // Check for broken timers.\n          if (measured > 0) {\n            sample.push(measured);\n          } else {\n            sample.push(Infinity);\n            break;\n          }\n        }\n        // Convert to seconds.\n        return getMean(sample) / divisor;\n      }\n\n      /**\n       * Interpolates a given template string.\n       */\n      function interpolate(string) {\n        // Replaces all occurrences of `#` with a unique number and template tokens with content.\n        return _.template(string.replace(/\\#/g, /\\d+/.exec(templateData.uid)))(templateData);\n      }\n\n      /*----------------------------------------------------------------------*/\n\n      // Detect Chrome's microsecond timer:\n      // enable benchmarking via the --enable-benchmarking command\n      // line switch in at least Chrome 7 to use chrome.Interval\n      try {\n        if ((timer.ns = new (context.chrome || context.chromium).Interval)) {\n          timers.push({ 'ns': timer.ns, 'res': getRes('us'), 'unit': 'us' });\n        }\n      } catch(e) {}\n\n      // Detect Node.js's nanosecond resolution timer available in Node.js >= 0.8.\n      if (processObject && typeof (timer.ns = processObject.hrtime) == 'function') {\n        timers.push({ 'ns': timer.ns, 'res': getRes('ns'), 'unit': 'ns' });\n      }\n      // Detect Wade Simmons' Node.js `microtime` module.\n      if (microtimeObject && typeof (timer.ns = microtimeObject.now) == 'function') {\n        timers.push({ 'ns': timer.ns,  'res': getRes('us'), 'unit': 'us' });\n      }\n      // Pick timer with highest resolution.\n      timer = _.minBy(timers, 'res');\n\n      // Error if there are no working timers.\n      if (timer.res == Infinity) {\n        throw new Error('Benchmark.js was unable to find a working timer.');\n      }\n      // Resolve time span required to achieve a percent uncertainty of at most 1%.\n      // For more information see http://spiff.rit.edu/classes/phys273/uncert/uncert.html.\n      options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));\n      return clock.apply(null, arguments);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Computes stats on benchmark results.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function compute(bench, options) {\n      options || (options = {});\n\n      var async = options.async,\n          elapsed = 0,\n          initCount = bench.initCount,\n          minSamples = bench.minSamples,\n          queue = [],\n          sample = bench.stats.sample;\n\n      /**\n       * Adds a clone to the queue.\n       */\n      function enqueue() {\n        queue.push(_.assign(bench.clone(), {\n          '_original': bench,\n          'events': {\n            'abort': [update],\n            'cycle': [update],\n            'error': [update],\n            'start': [update]\n          }\n        }));\n      }\n\n      /**\n       * Updates the clone/original benchmarks to keep their data in sync.\n       */\n      function update(event) {\n        var clone = this,\n            type = event.type;\n\n        if (bench.running) {\n          if (type == 'start') {\n            // Note: `clone.minTime` prop is inited in `clock()`.\n            clone.count = bench.initCount;\n          }\n          else {\n            if (type == 'error') {\n              bench.error = clone.error;\n            }\n            if (type == 'abort') {\n              bench.abort();\n              bench.emit('cycle');\n            } else {\n              event.currentTarget = event.target = bench;\n              bench.emit(event);\n            }\n          }\n        } else if (bench.aborted) {\n          // Clear abort listeners to avoid triggering bench's abort/cycle again.\n          clone.events.abort.length = 0;\n          clone.abort();\n        }\n      }\n\n      /**\n       * Determines if more clones should be queued or if cycling should stop.\n       */\n      function evaluate(event) {\n        var critical,\n            df,\n            mean,\n            moe,\n            rme,\n            sd,\n            sem,\n            variance,\n            clone = event.target,\n            done = bench.aborted,\n            now = _.now(),\n            size = sample.push(clone.times.period),\n            maxedOut = size >= minSamples && (elapsed += now - clone.times.timeStamp) / 1e3 > bench.maxTime,\n            times = bench.times,\n            varOf = function(sum, x) { return sum + pow(x - mean, 2); };\n\n        // Exit early for aborted or unclockable tests.\n        if (done || clone.hz == Infinity) {\n          maxedOut = !(size = sample.length = queue.length = 0);\n        }\n\n        if (!done) {\n          // Compute the sample mean (estimate of the population mean).\n          mean = getMean(sample);\n          // Compute the sample variance (estimate of the population variance).\n          variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;\n          // Compute the sample standard deviation (estimate of the population standard deviation).\n          sd = sqrt(variance);\n          // Compute the standard error of the mean (a.k.a. the standard deviation of the sampling distribution of the sample mean).\n          sem = sd / sqrt(size);\n          // Compute the degrees of freedom.\n          df = size - 1;\n          // Compute the critical value.\n          critical = tTable[Math.round(df) || 1] || tTable.infinity;\n          // Compute the margin of error.\n          moe = sem * critical;\n          // Compute the relative margin of error.\n          rme = (moe / mean) * 100 || 0;\n\n          _.assign(bench.stats, {\n            'deviation': sd,\n            'mean': mean,\n            'moe': moe,\n            'rme': rme,\n            'sem': sem,\n            'variance': variance\n          });\n\n          // Abort the cycle loop when the minimum sample size has been collected\n          // and the elapsed time exceeds the maximum time allowed per benchmark.\n          // We don't count cycle delays toward the max time because delays may be\n          // increased by browsers that clamp timeouts for inactive tabs. For more\n          // information see https://developer.mozilla.org/en/window.setTimeout#Inactive_tabs.\n          if (maxedOut) {\n            // Reset the `initCount` in case the benchmark is rerun.\n            bench.initCount = initCount;\n            bench.running = false;\n            done = true;\n            times.elapsed = (now - times.timeStamp) / 1e3;\n          }\n          if (bench.hz != Infinity) {\n            bench.hz = 1 / mean;\n            times.cycle = mean * bench.count;\n            times.period = mean;\n          }\n        }\n        // If time permits, increase sample size to reduce the margin of error.\n        if (queue.length < 2 && !maxedOut) {\n          enqueue();\n        }\n        // Abort the `invoke` cycle when done.\n        event.aborted = done;\n      }\n\n      // Init queue and begin.\n      enqueue();\n      invoke(queue, {\n        'name': 'run',\n        'args': { 'async': async },\n        'queued': true,\n        'onCycle': evaluate,\n        'onComplete': function() { bench.emit('complete'); }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Cycles a benchmark until a run `count` can be established.\n     *\n     * @private\n     * @param {Object} clone The cloned benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function cycle(clone, options) {\n      options || (options = {});\n\n      var deferred;\n      if (clone instanceof Deferred) {\n        deferred = clone;\n        clone = clone.benchmark;\n      }\n      var clocked,\n          cycles,\n          divisor,\n          event,\n          minTime,\n          period,\n          async = options.async,\n          bench = clone._original,\n          count = clone.count,\n          times = clone.times;\n\n      // Continue, if not aborted between cycles.\n      if (clone.running) {\n        // `minTime` is set to `Benchmark.options.minTime` in `clock()`.\n        cycles = ++clone.cycles;\n        clocked = deferred ? deferred.elapsed : clock(clone);\n        minTime = clone.minTime;\n\n        if (cycles > bench.cycles) {\n          bench.cycles = cycles;\n        }\n        if (clone.error) {\n          event = Event('error');\n          event.message = clone.error;\n          clone.emit(event);\n          if (!event.cancelled) {\n            clone.abort();\n          }\n        }\n      }\n      // Continue, if not errored.\n      if (clone.running) {\n        // Compute the time taken to complete last test cycle.\n        bench.times.cycle = times.cycle = clocked;\n        // Compute the seconds per operation.\n        period = bench.times.period = times.period = clocked / count;\n        // Compute the ops per second.\n        bench.hz = clone.hz = 1 / period;\n        // Avoid working our way up to this next time.\n        bench.initCount = clone.initCount = count;\n        // Do we need to do another cycle?\n        clone.running = clocked < minTime;\n\n        if (clone.running) {\n          // Tests may clock at `0` when `initCount` is a small number,\n          // to avoid that we set its count to something a bit higher.\n          if (!clocked && (divisor = divisors[clone.cycles]) != null) {\n            count = floor(4e6 / divisor);\n          }\n          // Calculate how many more iterations it will take to achieve the `minTime`.\n          if (count <= clone.count) {\n            count += Math.ceil((minTime - clocked) / period);\n          }\n          clone.running = count != Infinity;\n        }\n      }\n      // Should we exit early?\n      event = Event('cycle');\n      clone.emit(event);\n      if (event.aborted) {\n        clone.abort();\n      }\n      // Figure out what to do next.\n      if (clone.running) {\n        // Start a new cycle.\n        clone.count = count;\n        if (deferred) {\n          clone.compiled.call(deferred, context, timer);\n        } else if (async) {\n          delay(clone, function() { cycle(clone, options); });\n        } else {\n          cycle(clone);\n        }\n      }\n      else {\n        // Fix TraceMonkey bug associated with clock fallbacks.\n        // For more information see http://bugzil.la/509069.\n        if (support.browser) {\n          runScript(uid + '=1;delete ' + uid);\n        }\n        // We're done.\n        clone.emit('complete');\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Runs the benchmark.\n     *\n     * @memberOf Benchmark\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The benchmark instance.\n     * @example\n     *\n     * // basic usage\n     * bench.run();\n     *\n     * // or with options\n     * bench.run({ 'async': true });\n     */\n    function run(options) {\n      var bench = this,\n          event = Event('start');\n\n      // Set `running` to `false` so `reset()` won't call `abort()`.\n      bench.running = false;\n      bench.reset();\n      bench.running = true;\n\n      bench.count = bench.initCount;\n      bench.times.timeStamp = _.now();\n      bench.emit(event);\n\n      if (!event.cancelled) {\n        options = { 'async': ((options = options && options.async) == null ? bench.async : options) && support.timeout };\n\n        // For clones created within `compute()`.\n        if (bench._original) {\n          if (bench.defer) {\n            Deferred(bench);\n          } else {\n            cycle(bench, options);\n          }\n        }\n        // For original benchmarks.\n        else {\n          compute(bench, options);\n        }\n      }\n      return bench;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Firefox 1 erroneously defines variable and argument names of functions on\n    // the function itself as non-configurable properties with `undefined` values.\n    // The bugginess continues as the `Benchmark` constructor has an argument\n    // named `options` and Firefox 1 will not assign a value to `Benchmark.options`,\n    // making it non-writable in the process, unless it is the first property\n    // assigned by for-in loop of `_.assign()`.\n    _.assign(Benchmark, {\n\n      /**\n       * The default options copied by benchmark instances.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'options': {\n\n        /**\n         * A flag to indicate that benchmark cycles will execute asynchronously\n         * by default.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'async': false,\n\n        /**\n         * A flag to indicate that the benchmark clock is deferred.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'defer': false,\n\n        /**\n         * The delay between test cycles (secs).\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'delay': 0.005,\n\n        /**\n         * Displayed by `Benchmark#toString` when a `name` is not available\n         * (auto-generated if absent).\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'id': undefined,\n\n        /**\n         * The default number of times to execute a test on a benchmark's first cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'initCount': 1,\n\n        /**\n         * The maximum time a benchmark is allowed to run before finishing (secs).\n         *\n         * Note: Cycle delays aren't counted toward the maximum time.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'maxTime': 5,\n\n        /**\n         * The minimum sample size required to perform statistical analysis.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minSamples': 5,\n\n        /**\n         * The time needed to reduce the percent uncertainty of measurement to 1% (secs).\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minTime': 0,\n\n        /**\n         * The name of the benchmark.\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'name': undefined,\n\n        /**\n         * An event listener called when the benchmark is aborted.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onAbort': undefined,\n\n        /**\n         * An event listener called when the benchmark completes running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onComplete': undefined,\n\n        /**\n         * An event listener called after each run cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onCycle': undefined,\n\n        /**\n         * An event listener called when a test errors.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onError': undefined,\n\n        /**\n         * An event listener called when the benchmark is reset.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onReset': undefined,\n\n        /**\n         * An event listener called when the benchmark starts running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onStart': undefined\n      },\n\n      /**\n       * Platform object with properties describing things like browser name,\n       * version, and operating system. See [`platform.js`](https://mths.be/platform).\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'platform': context.platform || require('platform') || ({\n        'description': context.navigator && context.navigator.userAgent || null,\n        'layout': null,\n        'product': null,\n        'name': null,\n        'manufacturer': null,\n        'os': null,\n        'prerelease': null,\n        'version': null,\n        'toString': function() {\n          return this.description || '';\n        }\n      }),\n\n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type string\n       */\n      'version': '2.1.4'\n    });\n\n    _.assign(Benchmark, {\n      'filter': filter,\n      'formatNumber': formatNumber,\n      'invoke': invoke,\n      'join': join,\n      'runInContext': runInContext,\n      'support': support\n    });\n\n    // Add lodash methods to Benchmark.\n    _.each(['each', 'forEach', 'forOwn', 'has', 'indexOf', 'map', 'reduce'], function(methodName) {\n      Benchmark[methodName] = _[methodName];\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Benchmark.prototype, {\n\n      /**\n       * The number of times a test was executed.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'count': 0,\n\n      /**\n       * The number of cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The number of executions per second.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'hz': 0,\n\n      /**\n       * The compiled test function.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'compiled': undefined,\n\n      /**\n       * The error object if the test failed.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'error': undefined,\n\n      /**\n       * The test to benchmark.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'fn': undefined,\n\n      /**\n       * A flag to indicate if the benchmark is aborted.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the benchmark is running.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'running': false,\n\n      /**\n       * Compiled into the test and executed immediately **before** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       * @example\n       *\n       * // basic usage\n       * var bench = Benchmark({\n       *   'setup': function() {\n       *     var c = this.count,\n       *         element = document.getElementById('container');\n       *     while (c--) {\n       *       element.appendChild(document.createElement('div'));\n       *     }\n       *   },\n       *   'fn': function() {\n       *     element.removeChild(element.lastChild);\n       *   }\n       * });\n       *\n       * // compiles to something like:\n       * var c = this.count,\n       *     element = document.getElementById('container');\n       * while (c--) {\n       *   element.appendChild(document.createElement('div'));\n       * }\n       * var start = new Date;\n       * while (count--) {\n       *   element.removeChild(element.lastChild);\n       * }\n       * var end = new Date - start;\n       *\n       * // or using strings\n       * var bench = Benchmark({\n       *   'setup': '\\\n       *     var a = 0;\\n\\\n       *     (function() {\\n\\\n       *       (function() {\\n\\\n       *         (function() {',\n       *   'fn': 'a += 1;',\n       *   'teardown': '\\\n       *          }())\\n\\\n       *        }())\\n\\\n       *      }())'\n       * });\n       *\n       * // compiles to something like:\n       * var a = 0;\n       * (function() {\n       *   (function() {\n       *     (function() {\n       *       var start = new Date;\n       *       while (count--) {\n       *         a += 1;\n       *       }\n       *       var end = new Date - start;\n       *     }())\n       *   }())\n       * }())\n       */\n      'setup': _.noop,\n\n      /**\n       * Compiled into the test and executed immediately **after** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'teardown': _.noop,\n\n      /**\n       * An object of stats including mean, margin or error, and standard deviation.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'stats': {\n\n        /**\n         * The margin of error.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'moe': 0,\n\n        /**\n         * The relative margin of error (expressed as a percentage of the mean).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'rme': 0,\n\n        /**\n         * The standard error of the mean.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'sem': 0,\n\n        /**\n         * The sample standard deviation.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'deviation': 0,\n\n        /**\n         * The sample arithmetic mean (secs).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'mean': 0,\n\n        /**\n         * The array of sampled periods.\n         *\n         * @memberOf Benchmark#stats\n         * @type Array\n         */\n        'sample': [],\n\n        /**\n         * The sample variance.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'variance': 0\n      },\n\n      /**\n       * An object of timing data including cycle, elapsed, period, start, and stop.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'times': {\n\n        /**\n         * The time taken to complete the last cycle (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'cycle': 0,\n\n        /**\n         * The time taken to complete the benchmark (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'elapsed': 0,\n\n        /**\n         * The time taken to execute the test once (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'period': 0,\n\n        /**\n         * A timestamp of when the benchmark started (ms).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'timeStamp': 0\n      }\n    });\n\n    _.assign(Benchmark.prototype, {\n      'abort': abort,\n      'clone': clone,\n      'compare': compare,\n      'emit': emit,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'reset': reset,\n      'run': run,\n      'toString': toStringBench\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Deferred.prototype, {\n\n      /**\n       * The deferred benchmark instance.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type Object\n       */\n      'benchmark': null,\n\n      /**\n       * The number of deferred cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The time taken to complete the deferred benchmark (secs).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'elapsed': 0,\n\n      /**\n       * A timestamp of when the deferred benchmark started (ms).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'timeStamp': 0\n    });\n\n    _.assign(Deferred.prototype, {\n      'resolve': resolve\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Event.prototype, {\n\n      /**\n       * A flag to indicate if the emitters listener iteration is aborted.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the default action is cancelled.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'cancelled': false,\n\n      /**\n       * The object whose listeners are currently being processed.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'currentTarget': undefined,\n\n      /**\n       * The return value of the last executed listener.\n       *\n       * @memberOf Benchmark.Event\n       * @type Mixed\n       */\n      'result': undefined,\n\n      /**\n       * The object to which the event was originally emitted.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'target': undefined,\n\n      /**\n       * A timestamp of when the event was created (ms).\n       *\n       * @memberOf Benchmark.Event\n       * @type number\n       */\n      'timeStamp': 0,\n\n      /**\n       * The event type.\n       *\n       * @memberOf Benchmark.Event\n       * @type string\n       */\n      'type': ''\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The default options copied by suite instances.\n     *\n     * @static\n     * @memberOf Benchmark.Suite\n     * @type Object\n     */\n    Suite.options = {\n\n      /**\n       * The name of the suite.\n       *\n       * @memberOf Benchmark.Suite.options\n       * @type string\n       */\n      'name': undefined\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Suite.prototype, {\n\n      /**\n       * The number of benchmarks in the suite.\n       *\n       * @memberOf Benchmark.Suite\n       * @type number\n       */\n      'length': 0,\n\n      /**\n       * A flag to indicate if the suite is aborted.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the suite is running.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'running': false\n    });\n\n    _.assign(Suite.prototype, {\n      'abort': abortSuite,\n      'add': add,\n      'clone': cloneSuite,\n      'emit': emit,\n      'filter': filterSuite,\n      'join': arrayRef.join,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'pop': arrayRef.pop,\n      'push': push,\n      'reset': resetSuite,\n      'run': runSuite,\n      'reverse': arrayRef.reverse,\n      'shift': shift,\n      'slice': slice,\n      'sort': arrayRef.sort,\n      'splice': arrayRef.splice,\n      'unshift': unshift\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Expose Deferred, Event, and Suite.\n    _.assign(Benchmark, {\n      'Deferred': Deferred,\n      'Event': Event,\n      'Suite': Suite\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Add lodash methods as Suite methods.\n    _.each(['each', 'forEach', 'indexOf', 'map', 'reduce'], function(methodName) {\n      var func = _[methodName];\n      Suite.prototype[methodName] = function() {\n        var args = [this];\n        push.apply(args, arguments);\n        return func.apply(_, args);\n      };\n    });\n\n    // Avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in Firefox < 10 and IE < 9.\n    _.each(['pop', 'shift', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n\n      Suite.prototype[methodName] = function() {\n        var value = this,\n            result = func.apply(value, arguments);\n\n        if (value.length === 0) {\n          delete value[0];\n        }\n        return result;\n      };\n    });\n\n    // Avoid buggy `Array#unshift` in IE < 8 which doesn't return the new\n    // length of the array.\n    Suite.prototype.unshift = function() {\n      var value = this;\n      unshift.apply(value, arguments);\n      return value.length;\n    };\n\n    return Benchmark;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export Benchmark.\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so, through path mapping, it can be aliased.\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\n  else {\n    var Benchmark = runInContext();\n\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = Benchmark).Benchmark = Benchmark;\n      }\n      // Export for CommonJS support.\n      freeExports.Benchmark = Benchmark;\n    }\n    else {\n      // Export to the global object.\n      root.Benchmark = Benchmark;\n    }\n  }\n}.call(this));\n","const recoursive = (n) => {\r\n\tif (n === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (n === 1 || n === 2) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\treturn recoursive(n - 1) + recoursive(n - 2);\r\n};\r\n\r\nmodule.exports = { recoursive };","const tailRecoursive = (n, a = 0, b = 1) => {\r\n\tif (n === 0) {\r\n\t\treturn a;\r\n\t}\r\n\r\n\tif (n === 1) {\r\n\t\treturn b;\r\n\t}\r\n\r\n\treturn tailRecoursive(n - 1, b, a + b);\r\n};\r\n\r\nmodule.exports = { tailRecoursive };\r\n\r\n","// Reference:\r\n// a = 0 b = 1\r\n// a = 1 b = 1\r\n// a = 1 b = 2\r\n// a = 2 b = 3\r\n// a = 3 b = 5\r\n// a = 5 b = 8\r\n// a = 8 b = 13\r\n\r\nfunction loop(n) {\r\n    if (n === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (n === 1  || n === 2) {\r\n\t\treturn 1;\r\n    }\r\n    let i = 0\r\n    let a = 0;\r\n    let b = 1;\r\n    let tmp;\r\n    \r\n\twhile (i < n - 1) {\r\n        tmp = b\r\n        b = a + b\r\n        a = tmp\r\n        i++;\r\n    }\r\n    return b\r\n}\r\n\r\nmodule.exports = { loop };\r\n","const { recoursive } = require('./recoursive');\r\nconst { tailRecoursive } = require('./tail-recoursive');\r\nconst { loop } = require('./loop');\r\n\r\nmodule.exports = { recoursive, tailRecoursive, loop };\r\n","const Benchmark = require('benchmark');\r\nconst { recoursive, tailRecoursive, loop } = require('../src');\r\n\r\nconst suite = new Benchmark.Suite();\r\n\r\n// add tests\r\nsuite\r\n\t.add('recoursive', function() {\r\n\t\tfor (let i = 0; i < 25; i++) {\r\n\t\t\trecoursive(i);\r\n\t\t}\r\n\t})\r\n\t.add('tailRecoursive', function() {\r\n\t\tfor (let i = 0; i < 25; i++) {\r\n\t\t\ttailRecoursive(i);\r\n\t\t}\r\n\t})\r\n\t.add('loop', function() {\r\n\t\tfor (let i = 0; i < 25; i++) {\r\n\t\t\tloop(i);\r\n\t\t}\r\n\t})\r\n\t// add listeners\r\n\t.on('cycle', function(event) {\r\n\t\tconsole.log(String(event.target));\r\n\t})\r\n\t.on('complete', function() {\r\n\t\tconsole.log('Fastest is ' + this.filter('fastest').map('name'));\r\n\t})\r\n\t// run async\r\n\t.run({ async: true });\r\n\r\n// logs:\r\n// recoursive x 822 ops/sec ±0.47% (90 runs sampled)\r\n// tailRecoursive x 526,496 ops/sec ±1.02% (90 runs sampled)\r\n// Fastest is tailRecoursive\r\n"]}